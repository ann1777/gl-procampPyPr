Index: .gitignore.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore.py b/.gitignore.py
--- a/.gitignore.py	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/.gitignore.py	(date 1622804519933)
@@ -1,0 +1,13 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# IDE
+.idea/
+# Byte-compiled / optimized / DLL files
+_pychare_/
+*.py[cod]
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## Manual\r\n\r\nHow to run tests:\r\n\r\n1. Execute test directly \"src/tests/functional/smoke/LoginTest.python\"\r\n\r\n2. Execute Test Suite \"src/main/resources/testngSmokeTest.xml\"\r\n\r\n### Tasks:\r\n\r\n1. Create framework structure - [x]\r\n\r\n1.1. It shall contain folders for\r\n\r\n1.1.1. configuration - [x]\r\n\r\n1.1.2. application specific libraries/helpers - [x]\r\n\r\n1.1.3. app api clients - [x]\r\n\r\n1.1.4. page objects - [x]\r\n\r\n1.1.5. tests - [x]\r\n\r\n2. Create Config class - [x]\r\n\r\n2.1. It shall be possible to set config variables via Environment variables - [x]\r\n\r\n2.2. It shall be possible to set config variables via YAML file - [x]\r\n\r\n2.3. It shall be possible to set config variables inside Config class - [x]\r\n\r\n3. Create class for sending HTTP requests - [x]\r\n\r\n3.1. It shall be able to send requests:\r\n- GET - [x]\r\n- PUT - [x] \r\n- POST - [x]\r\n- DELETE - [x]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/README.md	(date 1623160846795)
@@ -8,13 +8,13 @@
 
 ### Tasks:
 
-1. Create framework structure - [x]
+1. Create framework structure 
 
 1.1. It shall contain folders for
 
-1.1.1. configuration - [x]
+1.1.1. configuration 
 
-1.1.2. application specific libraries/helpers - [x]
+1.1.2. application specific libraries/helpers 
 
 1.1.3. app api clients - [x]
 
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ /dev/null	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
@@ -1,13 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# IDE
-.idea/
-# Byte-compiled / optimized / DLL files
-_pychare_/
-*.py[cod]
Index: env-configs/__init__
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env-configs/__init__ b/env-configs/__init__
new file mode 100644
--- /dev/null	(date 1623056374280)
+++ b/env-configs/__init__	(date 1623056374280)
@@ -0,0 +1,50 @@
+import collections
+
+
+class HierarhicalProvider(ConfigKeyProvider):
+    """
+    Allows to create hierarhical override model,
+    for ex:
+    1.Env config (most priority)
+    2.Json config (les priority)
+    3.Dict config (with defaults)
+
+    In this situation the get key will try tio return value...,
+    In case it not configured (None) => resolve from 2nd,
+    In case it not configured from the lst one in the passed...
+    """
+    def __init__(self, None):
+        """
+        :param providers: Single item or list of ConfKeyPro
+        """
+        self.providers = []
+        if providers is not None:
+            self.add(providers)
+
+    def add(selfself, provider):
+        """
+        Adds aditional less priority providers to lookup.
+        :param provider: Single item or list of ConfigKeyProvider
+        """
+        def add_checked(p):
+            if issubclass(type(p), ConfigKeyProvider):
+                self.providers.append(p)
+            else:
+                raise ValueError("Provider must be of ConfigKeyProvider")
+
+        if isinstance(provider, collections.Sequence):
+            for item in provider:
+                add_checked(item)
+        else:
+            add_checked(provider)
+    def get(self, key):
+        """
+        Returns not None key value from the list best providers
+        or None if nothing configured
+        :param str key: Key to retrieve
+        """
+        for provider in self.providers:
+            result = provider.get(key)
+            if result is not None:
+                return result
+        return None
Index: env-configs/dev.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Config(BaseConfig):\r\ndef__init__(self);\r\nconfig_path = f\"env_configs/{os.enwiron...\";\r\nif(os.environ[\"TARGET\"]==\"prod\"):\r\n\r\n    else \"specifications/scout_index/dev.y...\"=\r\n(\r\napp_env = ConfigFromEnvProvider()\r\napp_json_conf = ConfigFromSimpleJsonProvider/cofig()\r\napp_defaults = ConfigFromDictProvider()\r\n{\r\n    \"USERS_DATA_PATH\":\"test_data/users\";\r\n    \"SAMPLES_DATA_PATH\":\"test_data/samples\";\r\n    \"SCOUT_DATA_PATH\":\"test_data/scout/search_qu...\";\r\n    \"WORKFLOW_SPECS_PATH\":f\"specifications/workflow\";\r\n    \"SCOUT_SPECS_PATH\":\"scout_spec_path\";\r\n    \"GMAIL_IMAP_HOST\":\"imap.gmail.com\";\r\n    \"EXPIRES\":86400;\r\n    \"LOGGING_COLORED\":\"1\";\r\n    \"AUTO_SAMPLES_FOLDER\":\"origin_files/automation\";\r\n    \"GRID_HUB_URL\":\"http://selenium.grid.dev.cosmosid\"\r\n    }\r\n)\r\nsuper(config,self).init()\r\n{\r\n    \"AWS_UPLOAD_BUCKET: cosmosid-samples\";\r\n    \"AWS_SECRET_ACCESS_KEY: ExBf32eW6...\";\r\n    \"ASW_ACCESS_KEY_ID: AKIA...\";\r\n    \"AWS_DEFAULT_REGION: US-east-1\";\r\n    \"AWS_S3_ENDPOINT_URL: https://s3.amazonaws.com\";\r\n    \"AWS_APP_BASE_URL: https://www-int.cosmosid.com\";\r\n    \"ADMIN_BASE_URL: https://www-int.cosmosid.com.8443\";\r\n    \"UTOOL_BASE_URL: https\"//base.cid.int:88\";\r\n    \"CLI_BASE_URL: https://rest-int.cosmosid.com\";\r\n    \"CLI_INSTALL_PARAMS: --pre --extra-index-url https://pip...\";\r\n    \"CLI_VERSION:\"\";\r\n    \"SCOUT_BASE_URL: https://compute.cid.int:9004/\";\r\n    \"ILLUMINA_CLIENT_KEY: 7eab2b89...\";\r\n    \"REDIS_PORT: 6379\";\r\n    \"REDIS_HOST: ec-cid-int.86dif0.001.usel...\";\r\n    \"DB_HOST: rds-int...\";\r\n    \"DB_PORT: 5432\";\r\n    \"DB_NAME: cid_int\";\r\n    \"DB_USER: cid_int\";\r\n    \"DB_PASS: eewisha2D...\";\r\n    \"DB_CUSTOMER: test@automation.ua\"\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env-configs/dev.js b/env-configs/dev.js
--- a/env-configs/dev.js	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/env-configs/dev.js	(date 1622825035234)
@@ -1,3 +1,54 @@
+import collections
+import ConfigKeyProvider
+
+class HierarhicalProvider(ConfigKeyProvider):
+    """
+    Allows to create hierarhical override model,
+    for ex:
+    1.Env config (most periority)
+    2.Json config (les proiority)
+    3.Dict config (with defaults)
+
+    In this situation the get key will try tio return value...,
+    In case it not configured (None) => resolve from 2nd,
+    In case it not configured from the lst one in the passed...
+    """
+    def __init__(self, None):
+        """
+        :param providers: Single item or list of ConfKeyPro
+        """
+        self.providers = []
+        if providers is not None:
+            self.add(providers)
+
+    def add(selfself, provider):
+        """
+        Adds aditional less priority providers to lookup.
+        :param provider: Single item or list of ConfigKeyProvider
+        """
+        def add_checked(p):
+            if issubclass(type(p), ConfigKeyProvider):
+                self.providers.append(p)
+            else:
+                raise ValueError("Provider must be of ConfigKeyProvider")
+
+        if isinstance(provider, collections.Sequence):
+            for item in provider:
+                add_checked(item)
+        else:
+            add_checked(provider)
+    def get(self, key):
+        """
+        Returns not None key value from the list best providers
+        or None if nothing configured
+        :param str key: Key to retrieve
+        """
+        for provider in self.providers:
+            result = provider.get(key)
+            if result is not None:
+                return result
+        return None
+
 class Config(BaseConfig):
 def__init__(self);
 config_path = f"env_configs/{os.enwiron...";
@@ -9,40 +60,39 @@
 app_json_conf = ConfigFromSimpleJsonProvider/cofig()
 app_defaults = ConfigFromDictProvider()
 {
-    "USERS_DATA_PATH":"test_data/users";
-    "SAMPLES_DATA_PATH":"test_data/samples";
-    "SCOUT_DATA_PATH":"test_data/scout/search_qu...";
-    "WORKFLOW_SPECS_PATH":f"specifications/workflow";
-    "SCOUT_SPECS_PATH":"scout_spec_path";
-    "GMAIL_IMAP_HOST":"imap.gmail.com";
-    "EXPIRES":86400;
-    "LOGGING_COLORED":"1";
-    "AUTO_SAMPLES_FOLDER":"origin_files/automation";
-    "GRID_HUB_URL":"http://selenium.grid.dev.cosmosid"
+    "USERS_DATA_PATH": "test_data/users";
+    "SAMPLES_DATA_PATH": "test_data/samples";
+    "SCOUT_DATA_PATH": "test_data/scout/search_qu...";
+    "WORKFLOW_SPECS_PATH": f"specifications/workflow";
+    "SCOUT_SPECS_PATH": "scout_spec_path";
+    "GMAIL_IMAP_HOST": "imap.gmail.com";
+    "EXPIRES": 86400;
+    "LOGGING_COLORED": "1";
+    "AUTO_SAMPLES_FOLDER": "origin_files/automation";
+    "GRID_HUB_URL": "http://selenium.grid.dev.cosmosid"
     }
 )
 super(config,self).init()
 {
-    "AWS_UPLOAD_BUCKET: cosmosid-samples";
-    "AWS_SECRET_ACCESS_KEY: ExBf32eW6...";
-    "ASW_ACCESS_KEY_ID: AKIA...";
-    "AWS_DEFAULT_REGION: US-east-1";
-    "AWS_S3_ENDPOINT_URL: https://s3.amazonaws.com";
-    "AWS_APP_BASE_URL: https://www-int.cosmosid.com";
-    "ADMIN_BASE_URL: https://www-int.cosmosid.com.8443";
-    "UTOOL_BASE_URL: https"//base.cid.int:88";
-    "CLI_BASE_URL: https://rest-int.cosmosid.com";
-    "CLI_INSTALL_PARAMS: --pre --extra-index-url https://pip...";
-    "CLI_VERSION:"";
-    "SCOUT_BASE_URL: https://compute.cid.int:9004/";
-    "ILLUMINA_CLIENT_KEY: 7eab2b89...";
-    "REDIS_PORT: 6379";
-    "REDIS_HOST: ec-cid-int.86dif0.001.usel...";
-    "DB_HOST: rds-int...";
-    "DB_PORT: 5432";
-    "DB_NAME: cid_int";
-    "DB_USER: cid_int";
-    "DB_PASS: eewisha2D...";
-    "DB_CUSTOMER: test@automation.ua"
+    "AWS_UPLOAD_BUCKET": "cosmosid-samples",
+    "AWS_SECRET_ACCESS_KEY": "ExBf32eW6NAITDbS17LNIL0azGz4SWt..",
+    "ASW_ACCESS_KEY_ID": "AKIAJ2VRMM2B6XYJ2QSA",
+    "AWS_DEFAULT_REGION": "us-east-1",
+    "AWS_S3_ENDPOINT_URL": https://s3.amazonaws.com",
+    "AWS_APP_BASE_URL": https://www-int.cosmosid.com",
+    "ADMIN_BASE_URL": https://www-int.cosmosid.com.8443",
+    "UTOOL_BASE_URL": http"//base.cid.int:88",
+    "CLI_BASE_URL": https://rest-int.cosmosid.com",
+    "CLI_INSTALL_PARAMS": "--pre --extra-index-url https://pip...",
+    "CLI_VERSION": "",
+    "SCOUT_BASE_URL": https://compute.cid.int:9004/",
+    "ILLUMINA_CLIENT_KEY": "7eab2b89e53a4d3188716d26856783c8",
+    "REDIS_PORT": "6379";
+    "REDIS_HOST": "ec-cid-int.86dif0.001.usel.cache.amazonaws...",
+    "DB_HOST": "rds-int.cex7kunzoekf.us-east-1.rds.amazonaws.com",
+    "DB_PORT": "5432",
+    "DB_NAME": "cid_int",
+    "DB_USER": "cid_int",
+    "DB_PASS": "eewisha2Devou6Yae3",
+    "DB_CUSTOMER": "test@automation.ua"
     }
-}
Index: env-configs/local.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env-configs/local.js b/env-configs/local.js
--- a/env-configs/local.js	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/env-configs/local.js	(date 1622807896185)
@@ -1,0 +1,47 @@
+class Config(BaseConfig):
+def__init__(self);
+config_path = f"env_configs/{os.enwiron...";
+if(os.environ["TARGET"]=="prod"):
+
+    else "specifications/scout_index/dev.y..."=
+(
+app_env = ConfigFromEnvProvider()
+app_json_conf = ConfigFromSimpleJsonProvider/cofig()
+app_defaults = ConfigFromDictProvider()
+{
+    "USERS_DATA_PATH":"test_data/users";
+    "SAMPLES_DATA_PATH":"test_data/samples";
+    "SCOUT_DATA_PATH":"test_data/scout/search_qu...";
+    "WORKFLOW_SPECS_PATH":f"specifications/workflow";
+    "SCOUT_SPECS_PATH":"scout_spec_path";
+    "GMAIL_IMAP_HOST":"imap.gmail.com";
+    "EXPIRES":86400;
+    "LOGGING_COLORED":"1";
+    "AUTO_SAMPLES_FOLDER":"origin_files/automation";
+    "GRID_HUB_URL":"http://selenium.grid.dev.cosmosid"
+    }
+)
+super(config,self).init()
+{
+    "AWS_UPLOAD_BUCKET": "cosmosid-samples",
+    "AWS_SECRET_ACCESS_KEY": "ExBf32eW6NAITDbS17LNIL0azGz4SWt..",
+    "ASW_ACCESS_KEY_ID": "AKIAJ2VRMM2B6XYJ2QSA",
+    "AWS_DEFAULT_REGION": "us-east-1",
+    "AWS_S3_ENDPOINT_URL": https://s3.amazonaws.com",
+    "AWS_APP_BASE_URL": https://www-int.cosmosid.com",
+    "ADMIN_BASE_URL": https://www-int.cosmosid.com.8443",
+    "UTOOL_BASE_URL": http"//base.cid.int:88",
+    "CLI_BASE_URL": https://rest-int.cosmosid.com",
+    "CLI_INSTALL_PARAMS": "--pre --extra-index-url https://pip...",
+    "CLI_VERSION": "",
+    "SCOUT_BASE_URL": https://compute.cid.int:9004/",
+    "REDIS_PORT": "6379";
+    "REDIS_HOST": "ec-cid-int.86dif0.001.usel.cache.amazonaws...",
+    "DB_HOST": "rds-int.cex7kunzoekf.us-east-1.rds.amazonaws.com",
+    "DB_PORT": "5432",
+    "DB_NAME": "cid_int",
+    "DB_USER": "cid_int",
+    "DB_PASS": "eewisha2Devou6Yae3",
+    "DB_CUSTOMER": "test@automation.ua",
+    "ILLUMINA_CLIENT_KEY": "7eab2b89e53a4d3188716d26856783c8",
+    }
\ No newline at end of file
Index: env-configs/qa.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Config(BaseConfig):\r\ndef__init__(self):\r\nconfig_path = f\"env_configs/{os.enwiron...\"\r\nif os.environ[\"TARGET\"] == \"prod\"\r\n    else \"specifications/scout_index/dev.y...\"\r\n)\r\napp_env = ConfigFromEnvProvider()\r\napp_json_conf = ConfigFromSimpleJsonProvid...\r\napp_defaults = ConfigFromDictProvider(\r\n\"USERS_DATA_PATH\": \"data/user...\"\r\n\"SAMPLES_DATA_PATH\": \"data/sampl...\"\r\n\"SCOUT_DATA_PATH\": f\"specifications/workf...\"\r\n\"SCOUT_SPECS_PATH\": \"scout_spec_path\",\r\n\"AWS_UPLOADS_BUCKET\": \"cosm...\"\r\n\"AWS_SECRET_ACCESS_KEY:\"\r\n\"AWS_ACCESS_KEY_ID\":\"...\"\r\n\"AWS_DEFAULT_REGION\": \"US -...\"\r\n\"AWS_S3_ENDPOINT_URL\": \"https://...\"\r\n\"ADMIN_BASE_UPL\": \"https://...\"\r\n\"UTOOL_BASE_URL\":\r\n\"CLI_BASE_URL\":\r\n\"CLI_INSTALL_PARAMS\":\r\n\"CLI_VERSION\":\r\n\"SCOUT_BASE_URL\":\r\n\"ILLUMINA_CLIENTT_...\"\r\n\"REDIS_PORT\": \"6379\" +\r\n\"REDIS_HOST\": \"..\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env-configs/qa.js b/env-configs/qa.js
--- a/env-configs/qa.js	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/env-configs/qa.js	(date 1623160846789)
@@ -10,8 +10,8 @@
 "USERS_DATA_PATH": "data/user..."
 "SAMPLES_DATA_PATH": "data/sampl..."
 "SCOUT_DATA_PATH": f"specifications/workf..."
-"SCOUT_SPECS_PATH": "scout_spec_path",
-"AWS_UPLOADS_BUCKET": "cosm..."
+"SCOUT_SPECS_PATH":"scout_spec_path",
+"AWS_UPLOADS_BUCKET" : "cosm..."
 "AWS_SECRET_ACCESS_KEY:"
 "AWS_ACCESS_KEY_ID":"..."
 "AWS_DEFAULT_REGION": "US -..."
Index: config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config.py b/config.py
new file mode 100644
--- /dev/null	(date 1622823317744)
+++ b/config.py	(date 1622823317744)
@@ -0,0 +1,49 @@
+from cosmos.config.validators import RequiredValid
+
+class Config(BaseConfig):
+    def __init__(self):
+        config_path = f"env_configs/{os.environ['TARGET']}.json"
+        scout_spec_path = (
+            f"specifications/scout_index/{os.environ['TARGET']}.yaml"
+            if os.environ["TARGET"] == "prod"
+            else "specifications/scout_index/dev.yaml"
+        )
+        app_env = ConfigFromEnvProvider()
+        app_json_conf = ConfigFromSimpleJsonProvider(config_path)
+        app_defaults = ConfigFromDictProvider(
+            {
+                "USERS_DATA_PATH": "test_data/users",
+                "SAMPLES_DATA_PATH": "test_data/samples",
+                "SCHOUT_DATA_PATH": "test_data/scout/search_queries.tsv",
+                "WORKFLOW-SPECS_PATH": f"specifications/workflows/{os.environ['TARGET']}",
+                "SCOUT_SPECS_PATH": scout_spec_path,
+                "GMAIL_IMAP_HOST": "imap.gmail.com",
+                "EXPIRES": 86400,
+                "LOGGING_LEVEL": "INFO",
+                "LOGGING_FORMAT": "%(asctime)s - %(filename)s:%(funcName)s:%(lineno)d",
+                "LOGGING_COLORED": "1",
+                "DEFAULT_FILE_PRIORITY": "7",
+                "AUTO_SAMPLES_FOLDER": "origin_files/automation/",
+                "GRID_HUB_URL": "http://selenium.grid.dev.cosmosid.com:4444/wd/hub",
+            }
+        )
+        super(Config. self).__init__()
+        self.config_provider = HierarchicalProvider([app_env, app_json_conf, app_defaults])
+
+        self.register_bulk(
+            {
+                "AUTO_SAMPLES_FOLDER": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "DEFAULT_FILE_PRIORITY": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "LOGGING_LEVEL": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "LOGGING_FORMAT": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "LOGGING_COLORED": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "USERS_DATA_PATH": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "SCOUT_DATA_PATH": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "WORKFLOW_SPECS_PATH": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "DB_PASS": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "DB_CUSTOMER": dict(converter=ToStringCoverter, validators=RequiredValid),
+                "ILLUMINA_CLIENT_KEY": dict(converter=ToStringCoverter, validators=RequiredValid)
+            }
+        )
+CONFIG = Config()
+
Index: src/tests/ui/tests_maimpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tests/ui/tests_maimpage.py b/src/tests/ui/tests_maimpage.py
new file mode 100644
--- /dev/null	(date 1622803092595)
+++ b/src/tests/ui/tests_maimpage.py	(date 1622803092595)
@@ -0,0 +1,8 @@
+import allure
+from pages.mainpage import MainPage
+
+class TestMainPage:
+    @allure.story('check_title_presence')
+    def test_check_title(self, driver):
+        mainpage = MainPage(driver)
+        assert mainpage.is_block_title_present(), 'title is not present on the mainpage'
\ No newline at end of file
Index: src/tests/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tests/conftest.py b/src/tests/conftest.py
new file mode 100644
--- /dev/null	(date 1622803092610)
+++ b/src/tests/conftest.py	(date 1622803092610)
@@ -0,0 +1,24 @@
+import pytest
+
+from core.config import configuration as config
+from core.webdriver_factory import get_webdriver
+
+def pytest_addoption(parser):
+    parser.adoption('--browser', 'store', None)
+    parser.adoption('--browser', 'store', 'Chrome',
+    'Please choose a browser as a required parsmeter:--browser')
+
+@pythest.fixture('session')
+def browser(request):
+    browser=config.get_config('browser')
+    if not browser:
+        browser=request.config.getOption('--browser')
+        return browser
+@pytest.fixture()
+def driver():
+    driver=get_webdriver()
+def driver(browser):
+    driver=get_webdriver(browser)
+    driver.implicitly_wait(10)
+    driver.set_window_side[1020, 1080]
+    yield driver
\ No newline at end of file
Index: src/page-objects/mainpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/page-objects/mainpage.py b/src/page-objects/mainpage.py
new file mode 100644
--- /dev/null	(date 1622803092610)
+++ b/src/page-objects/mainpage.py	(date 1622803092610)
@@ -0,0 +1,13 @@
+from selenium.webdriver.common.by import By
+from core.config.import Configurator
+from cosmosid_pages.base_page import BasePage
+
+class MainPageLocations:
+    BLOCK_TITLE = By.XPATH,'//h1[text()="Need Metagenomics Analysis?"]'
+
+class MainPage(BasePage):
+    def is_block_title_present(self):
+        self.open_url(Configurator.BASE_URL)
+        is_title = self.is_element_present(*MainPageLocators.BLOCK_TITLE)
+
+        return is_title
\ No newline at end of file
Index: Core/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\n\r\nHOME_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Core/config.py b/Core/config.py
--- a/Core/config.py	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/Core/config.py	(date 1622738453030)
@@ -1,3 +1,47 @@
 import os
+from pathlib import Path
+import yaml
 
 HOME_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
+BROWSER = os.environ.get('ENV', default='prod')
+BASE_URL = 'https://www.cosmosid.com/'
+LOGIN_PAGE = 'https://app.cosmosid.com/login'
+BROWSER = os.environ.get('ENV',default='chrome')
+config_path = Path.home()/'PycharmProjects'/'gl-procamp_PythonProject'/'Core'
+config_path_json = config_path/'env-configs'/f'.js'
+config_path_yaml = config_path/'config.yaml'
+defaults = {
+    "ENV": 'uat',
+    "BROWSER": 'chrome',
+    "BASE_URL": "https://www.cosmosid.com",
+    "LOGIN_PAGE": "https://app.cosmosid.com/login",
+    "SUPPORTED_BROWSERS": ["chrome", "firefox", "edge", "opera"]
+}
+@classmethod
+def get_config(cls, key:str):
+    '''Get configuration hierarhically from different sourses'''
+    env_var_config=cls._get_config_from_env_var()
+    json_config=cls._get_config_from_file(cls.config_path_json)
+    yaml_config=cls._get_config_from_file(cls.config_path_yaml)
+    config_providers=[env_var_config, json_config, yaml_config, cls.defaults]
+    for provider in config_providers:
+        result = provider.get(key)
+        if result is not None
+            return result
+        return None
+@classmethod
+def _get_config_from_env_var(cls):
+    '''Get configuration from environment variables'''
+    config_data = {}
+    for key, value in cls.defaults.items():
+        if key in os.environ:
+            config_data[key]=os.environ[key]
+        return config_data
+@classmethod
+def _get_config_from_file(cls, file_path):
+    '''Get configuration from file'''
+    with open(file_path, encoding='utf8') as fn:
+        config_data = yaml.load(fn)
+    return config_data
+
+
Index: src/page-objects/cosmosid_pages/base_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/page-objects/cosmosid_pages/base_page.py b/src/page-objects/cosmosid_pages/base_page.py
new file mode 100644
--- /dev/null	(date 1622800968439)
+++ b/src/page-objects/cosmosid_pages/base_page.py	(date 1622800968439)
@@ -0,0 +1,21 @@
+from selenium.common.exceptions import NoSuchElementException
+
+class BasePage
+    def __init__(self, driver):
+        self.driver = driver
+
+    def open_url(self, url):
+        self.driver.get(url)
+
+    def find_element(self, *locator):
+        return self.driver.find_element(*locator)
+
+    def find_element(self, *locator) -> list:
+        return self.driver.find_element(*locator)
+
+    def is_element_present(self, *locator):
+        try:
+            self.find_element(*locator)
+        except NoSuchElementException:
+            return False
+        return True
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dockerfile b/Dockerfile
--- a/Dockerfile	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/Dockerfile	(date 1622828987121)
@@ -1,0 +1,23 @@
+
+FROM golang:1.16-alpine AS build
+
+# Run `docker build --no-cache .` to update dependencies
+RUN apk add --no-cache git
+RUN go get github.com/golang/dep/cmd/dep
+
+# List project dependencies with Gopkg.toml and Gopkg.lock
+COPY Gopkg.lock Gopkg.toml /go/src/project/
+WORKDIR /go/src/project/
+# Install library dependencies
+RUN dep ensure -vendor-only
+
+# Copy the entire project and build it
+# This layer is rebuilt when a file changes in the project directory
+COPY . /go/src/project/
+RUN go build -o /bin/project
+
+# This results in a single layer image
+FROM scratch
+COPY --from=build /bin/project /bin/project
+ENTRYPOINT ["/bin/project"]
+CMD ["--help"]
\ No newline at end of file
Index: Core/webdriver_factory.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Core/webdriver_factory.py b/Core/webdriver_factory.py
new file mode 100644
--- /dev/null	(date 1622800968427)
+++ b/Core/webdriver_factory.py	(date 1622800968427)
@@ -0,0 +1,53 @@
+from sys import executable
+
+from selenium import webdriver
+from msedge.selenium_tools import webdriver
+from webdriver_manager.chrome import ChromeDriverManager
+from webdriver_manager.utils import Chrometype
+from webdriver_manager.microsoft import EdgeChromiumDriverManager
+from webdriver_manager.opera import OperaDriverManager
+from core.config import BROWSER
+
+def get_driver(BROWSER=None):
+    '''Get webdriver according to BROWSER'''
+    driver = None
+    if BROWSER == 'chrome':
+        driver = webdriver.Chrome(ChromeDriverManager(ChromeType.CHROMIUM).install())
+    elif BROWSER == 'firefox':
+        driver = webdriver.Firefox(GecoDriverManager().install())
+    elif BROWSER == 'edge':
+        driver = webdriver.Edge(EdgeChromiumDriverManager().install())
+    elif BROWSER == 'opera':
+        driver = webdriver.Opera(OperaDriverManager().install())
+    return driver
+
+def get_driver(requested_driver.str):
+    browsers_dict = {
+        'chrome': __get_chrome,
+        'firefox': __get_firefox,
+        'edge': __get_edge,
+        'opera': __get_opera
+       }
+    try:
+        return browsers_dict[requested_driven]()
+    except ValueError:
+        raise Exception ('Browser is not supported')
+
+def __get_chrome():
+    options=webdriver.ChromeOptions()
+    chrome_driver=webdriver.Chrome(ChromeDriverManager().install(), options)
+    return chrome_driver
+
+def __get_firefox():
+    options=webdriver.FirefoxOptions()
+    firefox_driver=webdriver.Firefox(GeckoDriverManager().install(), options)
+    return firefox_driver
+
+def __get_edge():
+    capabilities=webdriver.DesiredCapabilities().EDGE
+    edge_driver=webdriver.Edge(EdgeChromiumDriverManager().install(), capabilities)
+    return edge_driver
+
+def __get_opera():
+    opera_driver=webdriver.Opera(OperaDriverManager().install())
+    return opera_driver
Index: env-configs/prod.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env-configs/prod.yaml b/env-configs/prod.yaml
new file mode 100644
--- /dev/null	(date 1622738754295)
+++ b/env-configs/prod.yaml	(date 1622738754295)
@@ -0,0 +1,6 @@
+{
+  "BROWSER": "chrome",
+  "BASE_URL": "https://www.cosmosid.com/",
+  "LOGIN_PAGE": "https://api.cosmosid.com/login",
+  "SUPPORTED_BROWSERS": ["chrome", "firefox", "edge", "opera"]
+}
\ No newline at end of file
Index: env-configs/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/env-configs/__init__.py b/Core/config.yaml
rename from env-configs/__init__.py
rename to Core/config.yaml
--- a/env-configs/__init__.py	(revision 3944b3971eee52091b10e81d77aeb4a1d2c65f57)
+++ b/Core/config.yaml	(date 1622736654087)
@@ -1,0 +1,9 @@
+ENV : prod
+BASE_URL: 'https://www.cosmosid.com'
+LOGIN_PAGE: 'https://app.cosmosid.com/login'
+BROWSER: chrome
+SUPPORTED_BROWSERS:
+  - chrome
+  - firefox
+  - edge
+  - opera
\ No newline at end of file
diff --git a/__init__.py b/__init__.py
new file mode 100644
